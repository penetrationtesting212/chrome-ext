generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  password          String
  name              String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  extensionScripts  ExtensionScript[]
  locatorStrategies LocatorStrategy[]
  projects          Project[]
  refreshTokens     RefreshToken[]
  scripts           Script[]
  testDataFiles     TestDataFile[]
  testRuns          TestRun[]

  @@index([email])
}

model RefreshToken {
  id        String    @id @default(cuid())
  token     String    @unique
  userId    String
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scripts     Script[]

  @@index([userId])
  @@index([createdAt])
}

model Script {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  language            String               @default("typescript")
  code                String
  projectId           String?
  userId              String
  browserType         String               @default("chromium")
  viewport            Json?
  testIdAttribute     String               @default("data-testid")
  selfHealingEnabled  Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  breakpoints         Breakpoint[]
  project             Project?             @relation(fields: [projectId], references: [id])
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  selfHealingLocators SelfHealingLocator[]
  testDataFiles       TestDataFile[]
  testRuns            TestRun[]
  variables           Variable[]

  @@index([userId])
  @@index([projectId])
  @@index([createdAt])
}

model TestRun {
  id              String     @id @default(cuid())
  scriptId        String
  userId          String
  status          String
  duration        Int?
  errorMsg        String?
  traceUrl        String?
  screenshotUrls  Json?
  videoUrl        String?
  environment     String?
  browser         String     @default("chromium")
  viewport        Json?
  startedAt       DateTime   @default(now())
  completedAt     DateTime?
  allureReportUrl String?
  script          Script     @relation(fields: [scriptId], references: [id], onDelete: Cascade)
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps           TestStep[]

  @@index([scriptId])
  @@index([userId])
  @@index([status])
  @@index([startedAt])
}

model TestStep {
  id              String   @id @default(cuid())
  testRunId       String
  stepNumber      Int
  action          String
  selector        String?
  value           String?
  status          String
  duration        Int?
  errorMsg        String?
  originalLocator String?
  healedLocator   String?
  wasHealed       Boolean  @default(false)
  timestamp       DateTime @default(now())
  testRun         TestRun  @relation(fields: [testRunId], references: [id], onDelete: Cascade)

  @@index([testRunId])
  @@index([stepNumber])
}

model SelfHealingLocator {
  id            String    @id @default(cuid())
  scriptId      String
  brokenLocator String
  brokenType    String
  validLocator  String
  validType     String
  elementTag    String?
  elementText   String?
  confidence    Float     @default(1.0)
  status        String    @default("pending")
  reason        String?
  approvedAt    DateTime?
  timesUsed     Int       @default(0)
  lastUsedAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  script        Script    @relation(fields: [scriptId], references: [id], onDelete: Cascade)

  @@unique([scriptId, brokenLocator, validLocator])
  @@index([scriptId])
  @@index([status])
  @@index([brokenLocator])
}

model LocatorStrategy {
  id        String   @id @default(cuid())
  userId    String
  priority  Int
  strategy  String
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, strategy])
  @@index([userId, priority])
}

model TestDataFile {
  id          String        @id @default(cuid())
  name        String
  fileName    String
  fileType    String
  fileSize    Int
  fileUrl     String?
  scriptId    String?
  userId      String
  rowCount    Int           @default(0)
  columnNames Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  script      Script?       @relation(fields: [scriptId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  rows        TestDataRow[]

  @@index([scriptId])
  @@index([userId])
}

model TestDataRow {
  id        String       @id @default(cuid())
  fileId    String
  rowNumber Int
  data      Json
  createdAt DateTime     @default(now())
  file      TestDataFile @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([fileId, rowNumber])
  @@index([fileId])
  @@index([rowNumber])
}

model ExtensionScript {
  id          String   @id @default(cuid())
  name        String
  description String?
  code        String
  scriptType  String
  userId      String
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([scriptType])
}

model Variable {
  id        String   @id @default(cuid())
  scriptId  String
  name      String
  value     String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  script    Script   @relation(fields: [scriptId], references: [id], onDelete: Cascade)

  @@unique([scriptId, name])
  @@index([scriptId])
}

model Breakpoint {
  id         String   @id @default(cuid())
  scriptId   String
  lineNumber Int
  enabled    Boolean  @default(true)
  condition  String?
  createdAt  DateTime @default(now())
  script     Script   @relation(fields: [scriptId], references: [id], onDelete: Cascade)

  @@unique([scriptId, lineNumber])
  @@index([scriptId])
}
