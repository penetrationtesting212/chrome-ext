version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: playwright-crx-db
    environment:
      POSTGRES_DB: playwright_crx
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secure_password_change_this
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - playwright-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d playwright_crx"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: playwright-crx-backend
    environment:
      DATABASE_URL: postgresql://admin:secure_password_change_this@postgres:5432/playwright_crx?schema=public
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-your-super-secret-access-key-change-this}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-this}
      PORT: 3000
      NODE_ENV: production
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-chrome-extension://*,http://localhost:3000}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - playwright-network
    volumes:
      - ./backend/uploads:/app/uploads
    restart: unless-stopped
    command: >
      sh -c "
        npx prisma migrate deploy &&
        npm start
      "

  # Nginx (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: playwright-crx-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - backend
    networks:
      - playwright-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  playwright-network:
    driver: bridge
