{"version":3,"file":"settings.js","sources":["../src/settings.ts"],"sourcesContent":["/**\r\n * Copyright (c) Rui Figueira.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport type CrxSettings = {\r\n  testIdAttributeName: string;\r\n  targetLanguage: string;\r\n  sidepanel?: boolean;\r\n  experimental?: boolean;\r\n  playInIncognito: boolean;\r\n};\r\n\r\nexport const defaultSettings = {\r\n  testIdAttributeName: 'data-testid',\r\n  targetLanguage: 'playwright-test',\r\n  sidepanel: true,\r\n  experimental: false,\r\n  playInIncognito: false,\r\n};\r\n\r\nexport async function loadSettings(): Promise<CrxSettings> {\r\n  const [isAllowedIncognitoAccess, loadedPreferences] = await Promise.all([\r\n    chrome.extension.isAllowedIncognitoAccess(),\r\n    chrome.storage.sync.get(['testIdAttributeName', 'targetLanguage', 'sidepanel', 'playInIncognito', 'experimental']) as Partial<CrxSettings>,\r\n  ]);\r\n  return { ...defaultSettings, ...loadedPreferences, playInIncognito: !!loadedPreferences.playInIncognito && isAllowedIncognitoAccess };\r\n}\r\n\r\nexport async function storeSettings(settings: CrxSettings) {\r\n  await chrome.storage.sync.set(settings);\r\n}\r\n\r\nconst listeners = new Map<(settings: CrxSettings) => void, any>();\r\n\r\nexport function addSettingsChangedListener(listener: (settings: CrxSettings) => void) {\r\n  const wrappedListener = ({ testIdAttributeName, targetLanguage, sidepanel, playInIncognito, experimental }: Record<string, chrome.storage.StorageChange>) => {\r\n    if (!testIdAttributeName && !targetLanguage && sidepanel && playInIncognito && experimental)\r\n      return;\r\n\r\n    loadSettings().then(listener).catch(() => {});\r\n  };\r\n  listeners.set(listener, wrappedListener);\r\n  chrome.storage.sync.onChanged.addListener(wrappedListener);\r\n}\r\n\r\nexport function removeSettingsChangedListener(listener: (settings: CrxSettings) => void) {\r\n  const wrappedListener = listeners.get(listener);\r\n  if (!wrappedListener)\r\n    return;\r\n  chrome.storage.sync.onChanged.removeListener(wrappedListener);\r\n}\r\n"],"names":[],"mappings":"AAuBO,MAAM,kBAAkB;AAAA,EAC7B,qBAAqB;AAAA,EACrB,gBAAgB;AAAA,EAChB,WAAW;AAAA,EACX,cAAc;AAAA,EACd,iBAAiB;AACnB;AAEA,eAAsB,eAAqC;AACzD,QAAM,CAAC,0BAA0B,iBAAiB,IAAI,MAAM,QAAQ,IAAI;AAAA,IACtE,OAAO,UAAU,yBAAyB;AAAA,IAC1C,OAAO,QAAQ,KAAK,IAAI,CAAC,uBAAuB,kBAAkB,aAAa,mBAAmB,cAAc,CAAC;AAAA,EAAA,CAClH;AACM,SAAA,EAAE,GAAG,iBAAiB,GAAG,mBAAmB,iBAAiB,CAAC,CAAC,kBAAkB,mBAAmB,yBAAyB;AACtI;AAEA,eAAsB,cAAc,UAAuB;AACzD,QAAM,OAAO,QAAQ,KAAK,IAAI,QAAQ;AACxC;AAEA,MAAM,gCAAgB,IAA0C;AAEzD,SAAS,2BAA2B,UAA2C;AAC9E,QAAA,kBAAkB,CAAC,EAAE,qBAAqB,gBAAgB,WAAW,iBAAiB,mBAAiE;AAC3J,QAAI,CAAC,uBAAuB,CAAC,kBAAkB,aAAa,mBAAmB;AAC7E;AAEF,iBAAe,EAAA,KAAK,QAAQ,EAAE,MAAM,MAAM;AAAA,IAAA,CAAE;AAAA,EAC9C;AACU,YAAA,IAAI,UAAU,eAAe;AACvC,SAAO,QAAQ,KAAK,UAAU,YAAY,eAAe;AAC3D;AAEO,SAAS,8BAA8B,UAA2C;AACjF,QAAA,kBAAkB,UAAU,IAAI,QAAQ;AAC9C,MAAI,CAAC;AACH;AACF,SAAO,QAAQ,KAAK,UAAU,eAAe,eAAe;AAC9D;"}